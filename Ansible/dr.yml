- hosts: "{{cuboid_repo.host}}"
  gather_facts: no
  vars_files:
     - ./disaster-recovery/vars/main.yml
  tasks:
      - name: "Get config files from repository server"
        fetch:
            src: "{{cuboid_repo.dr_config_dir}}/{{client}}/{{env}}/hosts.txt"
            dest: "{{cuboid_data_dir}}/"
            flat: yes
            validate_checksum: no
        become: yes
        become_user: root
        become_method: sudo


- hosts: localhost
  gather_facts: no
  vars_files:
      - ./disaster-recovery/vars/main.yml
  tasks:

      - name: "Get AI hosts"
        shell: "cat {{cuboid_data_dir}}/hosts.txt | grep AI | cut -f 3 -d:"
        register: ai_hosts_list

      - name:
        set_fact:
            ai_hosts: "{{ai_hosts_list.stdout_lines[0]}}"

      - name: "Get ES hosts"
        shell: "cat {{cuboid_data_dir}}/hosts.txt | grep ES | cut -f 3 -d:"
        register: es_hosts_list

      - name:
        set_fact:
            es_hosts: "{{es_hosts_list.stdout_lines[0]}}"

      - name: "Get ADM hosts"
        shell: "cat {{cuboid_data_dir}}/hosts.txt | grep ADM | cut -f 3 -d:"
        register: adm_hosts_list

      - name:
        set_fact:
            adm_hosts: "{{adm_hosts_list.stdout_lines[0]}}"

      - name: "Get MSGW hosts"
        shell: "cat {{cuboid_data_dir}}/hosts.txt | grep MSGW | cut -f 3 -d:"
        register: msgw_hosts_list

      - name:
        set_fact:
            msgw_hosts: "{{msgw_hosts_list.stdout_lines[0]}}"

      - name: "Get SMG hosts"
        shell: "cat {{cuboid_data_dir}}/hosts.txt | grep SMG | cut -f 3 -d:"
        register: smg_hosts_list

      - name:
        set_fact:
            smg_hosts: "{{smg_hosts_list.stdout_lines[0]}}"

      - name: "Get AS2 hosts"
        shell: "cat {{cuboid_data_dir}}/hosts.txt | grep AS2 | cut -f 3 -d:"
        register: as2_hosts_list

      - name:
        set_fact:
            as2_hosts: "{{as2_hosts_list.stdout_lines[0]}}"

      - name: "Get AS2ADM hosts"
        shell: "cat {{cuboid_data_dir}}/hosts.txt | grep AS2ADM | cut -f 3 -d:"
        register: as2adm_hosts_list

      - name:
        set_fact:
            as2adm_hosts: "{{as2adm_hosts_list.stdout_lines[0]}}"


      - name: Make temp directory on ansible host
        file:
            path="cuboid/files"
            state=directory
            mode=0755

      - name: create a zip file of data files
        archive:
            path: "cuboid/scripts/*"
            dest: "cuboid/files/scripts.tar.gz"

- hosts: "{{ hostvars['localhost']['ai_hosts'] }},{{ hostvars['localhost']['es_hosts'] }},{{ hostvars['localhost']['adm_hosts'] }},{{ hostvars['localhost']['msgw_hosts'] }},{{ hostvars['localhost']['smg_hosts'] }},{{ hostvars['localhost']['as2_hosts'] }},{{ hostvars['localhost']['as2adm_hosts'] }}"
#- hosts: "{{hostvars['localhost']['as2adm_hosts']}}"
  gather_facts: no
  tasks:
      - block:
          - name: determine hosts that are up
            wait_for_connection:
              timeout: 10
            vars:
              ansible_connection: ssh
          - name: add devices with connectivity to the "running_hosts" group
            group_by:
              key: "running_hosts"

- hosts: running_hosts
  gather_facts: no
  vars_files:
      - ./disaster-recovery/vars/main.yml
  tasks:
      - setup:
        register: a_facts
        ignore_errors: yes

      - name: Make temp directory on remote host
        file:
            path="{{cuboid_tmp_dir}}/{{ansible_fqdn}}"
            state=directory
            mode=0755
        ignore_errors: yes

      - name: gather facts
        copy:
           content: "{{a_facts.ansible_facts}}"
           dest: "{{cuboid_tmp_dir}}/{{ansible_fqdn}}/{{ansible_fqdn}}_ansible_facts.json"
        ignore_errors: yes

      - include_role:
          name: disaster-recovery
        ignore_errors: yes

- hosts: localhost
  vars_files:
      - ./disaster-recovery/vars/main.yml
  gather_facts: no
  tasks:
      - name: Get file list
        shell: "ls {{cuboid_data_dir}}/*"
        register: filesToCopy
        ignore_errors: yes

      - name: store file list 
        set_fact: filesToCopy="{{filesToCopy.stdout_lines}}"
        ignore_errors: yes

      - name: create a zip file of data files
        archive:
            path: "{{cuboid_data_dir}}/*.tar.gz"
            dest: "{{cuboid_data_dir}}/cuboid_repo_{{tag}}.tar.gz"
            remove: yes
        ignore_errors: yes


- hosts: "{{cuboid_repo.host}}"
  gather_facts: no
  vars_files:
      - ./disaster-recovery/vars/main.yml
  tasks:
      - name: "copy files to {{cuboid_repo.host}}"
        copy:
            src: "{{cuboid_data_dir}}/cuboid_repo_{{tag}}.tar.gz"
            dest: "{{cuboid_repo.out_dir}}/{{client}}/{{env}}/hosts/"
            mode: 0644
        become: yes
        become_user: root
        become_method: sudo

      - name: "extract data files on repository server"
        shell: "/bin/python /automation/stability/scripts/Cuboid/bin/untarFiles.py"
        args:
          chdir: "{{cuboid_repo.out_dir}}/{{client}}/{{env}}/hosts"
          executable: /bin/bash
        environment:
          TERM: vt100
        become: yes
        become_user: root
        become_method: sudo

      - name: "Generate files for frontend"
        shell: "/bin/bash {{cuboid_repo.scripts_dir}}/generateFilesWrapper.sh "
        args:
          chdir: "{{cuboid_repo.scripts_dir}}"
          executable: /bin/bash
        environment:
          TERM: vt100
        become: yes
        become_user: root
        become_method: sudo

- hosts: "{{cuboid_repo.host}}"
  gather_facts: no
  vars_files:
      - ./disaster-recovery/vars/main.yml
  tasks:
      - name: "Get config files from repository server"
        fetch:
            src: "{{item}}"
            dest: "{{cuboid_data_dir}}/"
            flat: yes
            validate_checksum: no
        become: yes
        become_user: root
        become_method: sudo
        with_items:
           - "{{cuboid_repo.dr_config_dir}}/{{client}}/{{env}}/config/citi_config.tar.gz"
           - "{{cuboid_repo.cuboid_ui_dir}}/citi_{{env}}_dr_ui.json"
           - "{{cuboid_repo.cuboid_ui_dir}}/current_actions.json"

- hosts: running_hosts
  gather_facts: no
  vars_files:
      - ./disaster-recovery/vars/main.yml
  tasks:
      - name: copy config files to hosts
        copy:
           src: "{{item}}"
           dest: "{{cuboid_tmp_dir}}"
           mode: 0755
        become: yes
        become_user: root
        become_method: sudo
        with_items:
           - "{{cuboid_data_dir}}/citi_config.tar.gz"
           - "{{cuboid_data_dir}}/citi_{{env}}_dr_ui.json"
           - "{{cuboid_data_dir}}/current_actions.json"

- hosts: localhost
  gather_facts: no
  vars_files:
      - ./disaster-recovery/vars/main.yml
  tasks:
      - name: delete temporaray files
        file:
             path: "{{ item }}"
             state: absent
        with_items:
           - "{{filesToCopy}}"
           - "{{cuboid_data_dir}}/cuboid_repo_{{tag}}.tar.gz"
           - "{{cuboid_data_dir}}/citi_config.tar.gz"
           - "{{cuboid_data_dir}}/citi_{{env}}_dr_ui.json"
           - "{{cuboid_data_dir}}/current_actions.json"
